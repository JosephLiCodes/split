    let imagePicker: UIImagePickerController! = UIImagePickerController()
    var captureImage: UIImage!
    var flagImageSave = false


  @IBAction func btnLoadImageFromLibray(_ sender: UIButton) {


        if (UIImagePickerController.isSourceTypeAvailable(.photoLibrary)) {
            flagImageSave = false
            imagePicker.delegate = self
            imagePicker.sourceType = .photoLibrary
            imagePicker.mediaTypes = [kUTTypeImage as String]
            imagePicker.allowsEditing = true
            present(imagePicker, animated: true, completion: nil)
        }else{
            myAlert("photo album inaccessable", message: "application cannot access the photo album")
        }
    }

func ImageUpload(_ image: UIImage) {
guard image.jpegData(compressionQuality: 0.9) != nil else {
            self.dismiss(animated: true, completion: nil)
            return
        }
        let imagedata = image.jpegData(compressionQuality: 0.9)
        let uploadDict = ["num": "123456789"] as [String:String]
        //let headers: HTTPHeaders = ["key":"val"], don't need unless api headers are required
        Alamofire.upload(multipartFormData: { MultipartFormData in
           
            MultipartFormData.append(imagedata!, withName: "image" , fileName: "image.jpg" , mimeType: "image/jpg")
            for(key,value) in uploadDict{
                MultipartFormData.append(value.data(using: String.Encoding.utf8)!, withName: key)}  
        },to: "https://ocr.asprise.com/api/v1/receipt", headers: headers, encodingCompletion: {
            EncodingResult in
            switch EncodingResult{
            case .success(let upload, _, _):
                upload.responseJSON { response in   
                    guard let json = response.result.value! as? [String: Any] else {
                        return
                    }
                    print(json)
                }
            case .failure(let encodingError):
                print("ERROR RESPONSE: \(encodingError)")
            }
        })
    }